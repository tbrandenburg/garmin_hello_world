name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # SDK Version Strategy:
  # Use semver patterns: ^7.0.0 (latest 7.x), ^8.0.0 (latest 8.x), or exact version: 8.3.0
  # Note: "latest" is NOT supported by the CLI tool
  # See docs/SDK_SETUP.md for details
  # Updated to match local development environment (SDK 8.3.0)
  CONNECTIQ_SDK_VERSION: "^8.0.0"

jobs:
  build-and-test:
    # Use latest Ubuntu - CLI SDK Manager doesn't need GUI libs!
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Cache Connect IQ SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/connectiq-sdk
            ~/.Garmin/ConnectIQ/Sdks
            ~/.Garmin/ConnectIQ/Devices
          # Include SDK version in cache key so different versions use different caches
          # v4: Added devices directory to cache
          key: connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-v4
          restore-keys: |
            connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-
            connectiq-sdk-${{ runner.os }}-
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # CLI SDK Manager only needs basic tools - no GUI libraries!
          sudo apt-get install -y shellcheck wget unzip
      
      - name: Setup Developer Key
        env:
          MONKEYC_KEY_B64: ${{ secrets.MONKEYC_KEY_B64 }}
        run: |
          # Use env var instead of direct secret interpolation (more secure)
          mkdir -p .keys
          echo "$MONKEYC_KEY_B64" | base64 -d > .keys/developer_key.der
      
      - name: Setup Connect IQ SDK
        env:
          # Pass credentials directly to this step only (more secure)
          GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          # Uses CLI SDK Manager (lindell/connect-iq-sdk-manager-cli)
          # Pure CLI tool - no GUI libraries needed!
          # Version controlled by CONNECTIQ_SDK_VERSION env var (see top of workflow)
          # Cache speeds up subsequent runs significantly
          # Credentials are scoped to this step only for security
          
          echo "Target SDK version: $CONNECTIQ_SDK_VERSION"
          
          if [ ! -d ~/connectiq-sdk/bin ]; then
            echo "SDK not cached, running full setup..."
            ./scripts/setup_sdk.sh
          else
            echo "SDK found in cache"
            if [ -f ~/connectiq-sdk/bin/monkeyc ]; then
              echo "Cached SDK version:"
              ~/connectiq-sdk/bin/monkeyc --version || echo "Could not determine version"
            fi
            
            # Always verify and download devices if missing (they may not be cached)
            if [ ! -d ~/.Garmin/ConnectIQ/Devices/fr265 ]; then
              echo "Devices not found in cache, downloading..."
              
              # Install CLI SDK Manager if not present
              if [ ! -f /tmp/connect-iq-sdk-manager ]; then
                curl -s https://raw.githubusercontent.com/lindell/connect-iq-sdk-manager-cli/master/install.sh | sh -s -- -b /tmp
              fi
              
              # Download devices
              /tmp/connect-iq-sdk-manager device download --device fr265 --device fenix7 --device epix2 --device venu2 || {
                echo "Warning: Bulk device download failed, trying individually..."
                for device in fr265 fenix7 epix2 venu2; do
                  /tmp/connect-iq-sdk-manager device download --device "${device}" || echo "Warning: Could not download ${device}"
                done
              }
            else
              echo "Devices found in cache"
            fi
          fi
          
          echo "$HOME/connectiq-sdk/bin" >> $GITHUB_PATH
          echo "SDK_HOME=$HOME/connectiq-sdk" >> $GITHUB_ENV
      
      - name: Validate Environment
        run: |
          echo "=== SDK Information ==="
          monkeyc --version
          echo ""
          echo "=== Environment Validation ==="
          make validate
          echo ""
          echo "=== Supported Devices ==="
          make devices
          echo ""
          echo "=== Build System Version ==="
          make version
      
      - name: Discover Available Devices
        run: |
          echo "=== Searching for devices directory ==="
          
          # Find devices directory
          DEVICES_DIR=""
          if [ -d "$HOME/.Garmin/ConnectIQ/Devices" ]; then
            DEVICES_DIR="$HOME/.Garmin/ConnectIQ/Devices"
            echo "Found devices at: $DEVICES_DIR"
          elif [ -d "$SDK_HOME/devices" ]; then
            DEVICES_DIR="$SDK_HOME/devices"
            echo "Found devices at: $DEVICES_DIR"
          else
            echo "Devices directory not found. Checking common locations:"
            echo "  ✗ $HOME/.Garmin/ConnectIQ/Devices"
            echo "  ✗ $SDK_HOME/devices"
            echo ""
            echo "Listing all directories under SDK:"
            find "$SDK_HOME" -maxdepth 2 -type d 2>/dev/null | head -20
            DEVICES_DIR=""
          fi
          
          echo ""
          if [ -n "$DEVICES_DIR" ] && [ -d "$DEVICES_DIR" ]; then
            echo "=== Available devices (first 30) ==="
            ls -1 "$DEVICES_DIR" | head -30
            echo ""
            echo "=== Checking manifest targets ==="
            for device in fr265 fenix7 epix2 venu2; do
              if [ -d "$DEVICES_DIR/$device" ]; then
                echo "✓ $device exists"
              else
                echo "✗ $device NOT FOUND"
                echo "   Searching for similar names..."
                ls -1 "$DEVICES_DIR" | grep -i "$(echo $device | sed 's/[0-9]//g')" | head -5 || echo "   No matches found"
              fi
            done
          else
            echo "=== WARN: Devices not found ==="
            echo "Builds will fail if devices are not available."
            echo "The setup script should have installed them."
          fi
      
      - name: Build All Devices
        run: make buildall -j4
      
      - name: List Build Artifacts
        run: |
          echo "Build artifacts:"
          ls -lh bin/*.prg
      
      # Tests require simulator GUI - skip in CI for now
      # To enable: setup xvfb-run or use headless simulator setup
      # - name: Run Tests
      #   run: xvfb-run -a make test
      
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/
          retention-days: 30
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prg-files
          path: bin/*.prg
          retention-days: 90
