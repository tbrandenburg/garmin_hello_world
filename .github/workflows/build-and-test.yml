name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # SDK Version Strategy:
  # Use semver patterns: ^7.0.0 (latest 7.x), ^8.0.0 (latest 8.x), or exact version: 7.3.1
  # Note: "latest" is NOT supported by the CLI tool
  # See docs/SDK_SETUP.md for details
  CONNECTIQ_SDK_VERSION: "^7.0.0"

jobs:
  build-and-test:
    # Use latest Ubuntu - CLI SDK Manager doesn't need GUI libs!
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Cache Connect IQ SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/connectiq-sdk
            ~/.Garmin/ConnectIQ/Sdks
          # Include SDK version in cache key so different versions use different caches
          key: connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-v3
          restore-keys: |
            connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-
            connectiq-sdk-${{ runner.os }}-
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # CLI SDK Manager only needs basic tools - no GUI libraries!
          sudo apt-get install -y shellcheck wget unzip
      
      - name: Setup Developer Key
        env:
          MONKEYC_KEY_B64: ${{ secrets.MONKEYC_KEY_B64 }}
        run: |
          # Use env var instead of direct secret interpolation (more secure)
          mkdir -p .keys
          echo "$MONKEYC_KEY_B64" | base64 -d > .keys/developer_key.der
      
      - name: Setup Connect IQ SDK
        env:
          # Pass credentials directly to this step only (more secure)
          GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          # Uses CLI SDK Manager (lindell/connect-iq-sdk-manager-cli)
          # Pure CLI tool - no GUI libraries needed!
          # Version controlled by CONNECTIQ_SDK_VERSION env var (see top of workflow)
          # Cache speeds up subsequent runs significantly
          # Credentials are scoped to this step only for security
          
          echo "Target SDK version: $CONNECTIQ_SDK_VERSION"
          
          if [ ! -d ~/connectiq-sdk/bin ]; then
            echo "SDK not cached, running CLI SDK Manager..."
            ./scripts/setup_sdk.sh
          else
            echo "SDK found in cache, skipping installation"
            # Show cached SDK version
            if [ -f ~/connectiq-sdk/bin/monkeyc ]; then
              echo "Cached SDK version:"
              ~/connectiq-sdk/bin/monkeyc --version || echo "Could not determine version"
            fi
          fi
          
          echo "$HOME/connectiq-sdk/bin" >> $GITHUB_PATH
          echo "SDK_HOME=$HOME/connectiq-sdk" >> $GITHUB_ENV
      
      - name: Validate Environment
        run: |
          echo "=== SDK Information ==="
          monkeyc --version
          echo ""
          echo "=== Environment Validation ==="
          make validate
          echo ""
          echo "=== Supported Devices ==="
          make devices
          echo ""
          echo "=== Build System Version ==="
          make version
      
      - name: Discover Available Devices
        run: |
          echo "=== Available devices in SDK 7.x ==="
          ls -1 "$SDK_HOME/devices" | head -30
          echo ""
          echo "=== Checking manifest targets ==="
          for device in fr265 fenix7 epix2 venu2; do
            if [ -d "$SDK_HOME/devices/$device" ]; then
              echo "✓ $device exists in SDK"
            else
              echo "✗ $device NOT FOUND in SDK"
              echo "   Searching for similar names..."
              ls -1 "$SDK_HOME/devices" | grep -i "$(echo $device | sed 's/[0-9]//g')" || echo "   No matches found"
            fi
          done
      
      - name: Build All Devices
        run: make buildall -j4
      
      - name: List Build Artifacts
        run: |
          echo "Build artifacts:"
          ls -lh bin/*.prg
      
      # Tests require simulator GUI - skip in CI for now
      # To enable: setup xvfb-run or use headless simulator setup
      # - name: Run Tests
      #   run: xvfb-run -a make test
      
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/
          retention-days: 30
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prg-files
          path: bin/*.prg
          retention-days: 90
