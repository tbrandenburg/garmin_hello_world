name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types:
      # Run when the PR is opened, updated with new commits, or re-opened
      - opened
      - synchronize
      - reopened

env:
  # SDK Version Strategy:
  # Use semver patterns: ^7.0.0 (latest 7.x), ^8.0.0 (latest 8.x), or exact version: 8.3.0
  # Note: "latest" is NOT supported by the CLI tool
  # See docs/SDK_SETUP.md for details
  # Updated to match local development environment (SDK 8.3.0)
  CONNECTIQ_SDK_VERSION: "^8.0.0"

jobs:
  build-and-test:
    # Use latest Ubuntu - CLI SDK Manager doesn't need GUI libs!
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Cache Connect IQ SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/connectiq-sdk
            ~/.Garmin/ConnectIQ/Sdks
            ~/.Garmin/ConnectIQ/Devices
          # Include SDK version in cache key so different versions use different caches
          # v4: Added devices directory to cache
          key: connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-v4
          restore-keys: |
            connectiq-sdk-${{ runner.os }}-${{ env.CONNECTIQ_SDK_VERSION }}-
            connectiq-sdk-${{ runner.os }}-
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # Install basic tools plus xvfb for headless GUI testing
          sudo apt-get install -y shellcheck wget unzip xvfb
      
      - name: Setup Developer Key
        env:
          MONKEYC_KEY_B64: ${{ secrets.MONKEYC_KEY_B64 }}
        run: |
          # Use env var instead of direct secret interpolation (more secure)
          mkdir -p .keys
          echo "$MONKEYC_KEY_B64" | base64 -d > .keys/developer_key.der
      
      - name: Setup Connect IQ SDK
        env:
          # Pass credentials directly to this step only (more secure)
          GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          if [ ! -d ~/connectiq-sdk/bin ]; then
            echo "Setting up Connect IQ SDK $CONNECTIQ_SDK_VERSION..."
            ./scripts/setup_sdk.sh
          else
            echo "✓ SDK cached ($(~/connectiq-sdk/bin/monkeyc --version 2>&1 | head -n1))"
            
            # Verify devices exist, download if missing
            if [ ! -d ~/.Garmin/ConnectIQ/Devices/fr265 ]; then
              echo "Downloading devices..."
              
              # Install CLI SDK Manager
              curl -s https://raw.githubusercontent.com/lindell/connect-iq-sdk-manager-cli/master/install.sh | sh -s -- -b /tmp >/dev/null 2>&1
              
              # Login (required for device downloads)
              /tmp/connect-iq-sdk-manager login --username="$GARMIN_USERNAME" --password="$GARMIN_PASSWORD" >/dev/null 2>&1 || true
              
              # Download devices
              if ! /tmp/connect-iq-sdk-manager device download --device fr265 --device fenix7 --device epix2 --device venu2; then
                echo "Warning: Bulk download failed, trying individually..."
                for device in fr265 fenix7 epix2 venu2; do
                  /tmp/connect-iq-sdk-manager device download --device "$device" || echo "Failed: $device"
                done
              fi
              echo "✓ Devices downloaded"
            else
              echo "✓ Devices cached (4 devices available)"
            fi
          fi
          
          echo "$HOME/connectiq-sdk/bin" >> $GITHUB_PATH
          echo "SDK_HOME=$HOME/connectiq-sdk" >> $GITHUB_ENV
      
      - name: Verify Devices Installed
        run: |
          echo "Checking for required devices..."
          DEVICES_DIR="$HOME/.Garmin/ConnectIQ/Devices"
          
          if [ ! -d "$DEVICES_DIR" ]; then
            echo "ERROR: Devices directory not found at $DEVICES_DIR"
            exit 1
          fi
          
          for device in fr265 fenix7 epix2 venu2; do
            if [ -d "$DEVICES_DIR/$device" ]; then
              echo "✓ $device"
            else
              echo "✗ $device MISSING"
              exit 1
            fi
          done
          
          echo "All devices verified!"
      
      - name: Validate Environment
        run: |
          echo "Validating build environment..."
          make validate
          make version
      
      - name: Build All Devices
        run: make buildall  # Sequential build (parallel fails on Linux)

      - name: List Build Artifacts
        run: |
          echo "Build artifacts:"
          ls -lh bin/*.prg

      - name: Package Release Bundle
        run: make package

      - name: List Store Package
        run: |
          echo "Store package artifacts:"
          ls -lh dist/*.iq
      
      - name: Run Unit Tests
        run: |
          echo "Running Connect IQ unit tests with headless display..."
          
          # Start virtual display for headless testing
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          sleep 3
          
          # Build test version
          echo "Building tests for fr265..."
          monkeyc -f monkey.jungle.test -d fr265 -o bin/test_fr265.prg -y .keys/developer_key.der --unit-test
          
          # Start simulator in background (Linux version)
          echo "Starting Connect IQ Simulator..."
          if [ -f "$SDK_HOME/bin/simulator" ]; then
            "$SDK_HOME/bin/simulator" > /dev/null 2>&1 &
            SIM_PID=$!
            sleep 5
          elif [ -f "$SDK_HOME/bin/ConnectIQ" ]; then
            "$SDK_HOME/bin/ConnectIQ" > /dev/null 2>&1 &
            SIM_PID=$!
            sleep 5
          else
            echo "Warning: Could not find simulator binary, trying direct monkeydo..."
          fi
          
          # Run the tests with proper exit code handling
          echo "Running unit tests..."
          mkdir -p logs
          monkeydo bin/test_fr265.prg fr265 -t 2>&1 | tee logs/unit-tests.log || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "Tests completed (Connect IQ simulator exited with code 1)"
              # Check if tests actually passed by looking at the log
              if grep -q "PASSED" logs/unit-tests.log; then
                echo "✓ All unit tests passed successfully"
              else
                echo "✗ Tests may have failed - check logs"
                cat logs/unit-tests.log
                kill $XVFB_PID 2>/dev/null || true
                kill $SIM_PID 2>/dev/null || true
                exit 1
              fi
            else
              echo "Tests failed with exit code $EXIT_CODE"
              cat logs/unit-tests.log
              # Cleanup
              kill $XVFB_PID 2>/dev/null || true
              kill $SIM_PID 2>/dev/null || true
              exit $EXIT_CODE
            fi
          }
          
          # Cleanup
          echo "Cleaning up processes..."
          kill $SIM_PID 2>/dev/null || true
          kill $XVFB_PID 2>/dev/null || true
          echo "✓ Unit tests completed successfully"
      
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/
          retention-days: 30
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prg-files
          path: bin/*.prg
          retention-days: 90

      - name: Upload Store Package
        uses: actions/upload-artifact@v4
        with:
          name: iq-package
          path: dist/*.iq
          retention-days: 30
